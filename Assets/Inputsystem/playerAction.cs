//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputsystem/playerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playerAction"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""b28ad403-e4b3-4d61-b68e-aeb01af5f2d8"",
            ""actions"": [
                {
                    ""name"": ""Axes"",
                    ""type"": ""Value"",
                    ""id"": ""fd547916-7383-4e94-9b9f-80c58810c583"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""37d00934-f43f-461b-a180-a0c7da73747b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slider"",
                    ""type"": ""Button"",
                    ""id"": ""f635cdd7-7ee0-444a-be54-db3197146c5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""3aa9f86a-8c93-4a30-9ae1-0b3ac0e30b16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Addblone"",
                    ""type"": ""Button"",
                    ""id"": ""f01b44ac-11ec-410e-a07f-a7cec6453f14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchBullet"",
                    ""type"": ""Button"",
                    ""id"": ""f9eb0be8-6a17-4541-a707-a63733f18b5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""27b2c69b-96b8-4372-a19e-8694b6884cfb"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bdfc839f-1d83-470e-be98-72310efa2ec2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da3d2c54-2f0d-4962-a314-cb66291eb261"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""90ebc640-3e59-4c7a-b9df-04b7d99f35c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""55a88644-d4c2-4578-babd-0d816ca6c4ad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0a2bb8c-ad2b-480e-91d3-526c36129fb8"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ba7710e-5bf7-4e6a-ba0d-b2410b119308"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slider"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ce68578-503f-4ad9-a959-3d40f48c7491"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de080c94-8a56-429a-a80b-bc9a1c20cc96"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Addblone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b9291d1-5028-45bd-bc00-05835c154461"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Axes = m_GamePlay.FindAction("Axes", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_Slider = m_GamePlay.FindAction("Slider", throwIfNotFound: true);
        m_GamePlay_Shoot = m_GamePlay.FindAction("Shoot", throwIfNotFound: true);
        m_GamePlay_Addblone = m_GamePlay.FindAction("Addblone", throwIfNotFound: true);
        m_GamePlay_SwitchBullet = m_GamePlay.FindAction("SwitchBullet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Axes;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_Slider;
    private readonly InputAction m_GamePlay_Shoot;
    private readonly InputAction m_GamePlay_Addblone;
    private readonly InputAction m_GamePlay_SwitchBullet;
    public struct GamePlayActions
    {
        private @PlayerAction m_Wrapper;
        public GamePlayActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Axes => m_Wrapper.m_GamePlay_Axes;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @Slider => m_Wrapper.m_GamePlay_Slider;
        public InputAction @Shoot => m_Wrapper.m_GamePlay_Shoot;
        public InputAction @Addblone => m_Wrapper.m_GamePlay_Addblone;
        public InputAction @SwitchBullet => m_Wrapper.m_GamePlay_SwitchBullet;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Axes.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAxes;
                @Axes.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAxes;
                @Axes.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAxes;
                @Jump.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Slider.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSlider;
                @Slider.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSlider;
                @Slider.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSlider;
                @Shoot.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnShoot;
                @Addblone.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAddblone;
                @Addblone.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAddblone;
                @Addblone.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAddblone;
                @SwitchBullet.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSwitchBullet;
                @SwitchBullet.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSwitchBullet;
                @SwitchBullet.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSwitchBullet;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Axes.started += instance.OnAxes;
                @Axes.performed += instance.OnAxes;
                @Axes.canceled += instance.OnAxes;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Slider.started += instance.OnSlider;
                @Slider.performed += instance.OnSlider;
                @Slider.canceled += instance.OnSlider;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Addblone.started += instance.OnAddblone;
                @Addblone.performed += instance.OnAddblone;
                @Addblone.canceled += instance.OnAddblone;
                @SwitchBullet.started += instance.OnSwitchBullet;
                @SwitchBullet.performed += instance.OnSwitchBullet;
                @SwitchBullet.canceled += instance.OnSwitchBullet;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnAxes(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSlider(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAddblone(InputAction.CallbackContext context);
        void OnSwitchBullet(InputAction.CallbackContext context);
    }
}
